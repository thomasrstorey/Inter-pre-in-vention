var text1 = fs.readFileSync('/text1.txt', 'utf-8'),
    text2 = fs.readFileSync('/text2.txt', 'utf-8');

exports['Async'] = {
  'no progress callback': function(done) {
    this.timeout(20000);

    var startTime = new Date().valueOf();

    levenshtein.getAsync(text1, text2, function(err, distance) {
      var timeElapsed = new Date().valueOf() - startTime;

      console.log(timeElapsed + ' ms');

      done();
    });
  },
  'with progress callback': function(done) {
    this.timeout(20000);

    var percents = [];
    var progress = function(percent) {
      percents.push(percent);
    };

    var startTime = new Date().valueOf();

    levenshtein.getAsync(text1, text2, function(err, distance) {
      var timeElapsed = new Date().valueOf() - startTime;

      console.log(timeElapsed + ' ms, ' + percents.length + ' progress updates');

      expect(0 < percents.length).to.be.true;

      // check percentages
      var lastPercent = 0;
      _.each(percents, function(percent) {
        expect(100 >= percent);
        expect(percent > lastPercent);
        lastPercent = percent;
      });

      done();
    }, {
      progress: progress
    });
  },
  'progress callback error': function(done) {
    levenshtein.getAsync(text1 + text2, text2 + text1, function(err) {
      expect(err.toString()).to.be.eql('Progress callback: Error: Bla bla');

      done();
    }, {
      progress: function() {
        throw new Error('Bla bla');
      }
    });
  }
};